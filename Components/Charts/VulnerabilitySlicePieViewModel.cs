using DevExpress.Mvvm;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LogAnalysisTool.Components.Charts
{
    /// <summary>
    /// VulnerabilitySlicePieViewModel - ViewModel class for the vulnerability pie chart slices
    /// </summary>
    public class VulnerabilitySlicePieViewModel : ViewModelBase
    {
        private double _accumulated;
        private int _count;
        private int _index;
        private string _name;
        private double _percentage;

        /// <summary>
        /// Accumulated() - Represents accumulated percentage as you go around the pie chart
        /// </summary>
        public double Accumulated
        {
            get { return _accumulated; }
            set
            {
                if (_accumulated == value)
                {
                    return;
                }

                _accumulated = value;
                RaisePropertyChanged(nameof(Accumulated));
            }
        }

        /// <summary>
        /// Count() - Represents the number of occurrances of this vulnerability in the log file
        /// </summary>
        public int Count
        {
            get { return _count; }
            set
            {
                if (_count == value)
                {
                    return;
                }

                _count = value;
                RaisePropertyChanged(nameof(Count));
            }
        }

        /// <summary>
        /// Index() - Represents the index of the pie slice for the chart
        /// </summary>
        public int Index
        {
            get { return _index; }
            set
            {
                if (_index == value)
                {
                    return;
                }

                _index = value;
                RaisePropertyChanged(nameof(Index));
            }
        }

        /// <summary>
        /// Name() - Represents the name of the vulnerability
        /// </summary>
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name == value)
                {
                    return;
                }

                _name = value;
                RaisePropertyChanged(nameof(Name));
            }
        }

        /// <summary>
        /// Percentage() - Represents the percentage of this vulnerabilty as a proportion of all detected
        /// vulnerabilities
        /// </summary>
        public double Percentage
        {
            get { return _percentage; }
            set
            {
                if (_percentage == value)
                {
                    return;
                }

                _percentage = value;
                RaisePropertyChanged(nameof(Percentage));
            }
        }
    }
}
